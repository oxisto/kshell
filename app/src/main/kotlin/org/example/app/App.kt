/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.app

import org.jline.builtins.ConfigurationPath
import org.jline.console.ConsoleEngine.WidgetCreator
import org.jline.console.impl.Builtins
import org.jline.console.impl.ConsoleEngineImpl
import org.jline.console.impl.DefaultPrinter
import org.jline.console.impl.SystemRegistryImpl
import org.jline.reader.LineReaderBuilder
import org.jline.reader.Parser
import org.jline.reader.impl.DefaultParser
import org.jline.terminal.Terminal
import org.jline.terminal.Terminal.Signal
import org.jline.terminal.TerminalBuilder
import java.nio.file.Path
import java.nio.file.Paths
import java.util.function.Supplier

val version = "0.0.0"

class KotlinShellRegistry(parser: Parser,
                          terminal: Terminal,
                          workDir: Supplier<Path>,
                          configPath: ConfigurationPath,
    ) : SystemRegistryImpl(parser, terminal, workDir, configPath)

fun main() {
    val parser = DefaultParser()

    val terminal = TerminalBuilder.builder().name("kshell")
        .build()

    val executeThread = Thread.currentThread()
    terminal.handle(Signal.INT) { signal -> executeThread.interrupt() }

    val workDir = { Paths.get(System.getProperty("user.dir")) }

    val configPath = ConfigurationPath(Paths.get("."), Paths.get("."))

    val scriptEngine = KotlinScriptEngine()

    val printer = DefaultPrinter(scriptEngine, configPath)
    val console = ConsoleEngineImpl(scriptEngine, printer, workDir, configPath);

    val registry = KotlinShellRegistry(parser, terminal, workDir, configPath)
    registry.setCommandRegistries(console);

    val reader = LineReaderBuilder.builder()
        .terminal(terminal)
        .completer(registry.completer())
        .parser(parser)
        .build()

    console.setLineReader(reader)

    println(terminal.name + ": version $version")

    while (true) {
        try {
            registry.cleanUp()
            var line = reader.readLine("kshell> ")
            println("Reading $line")
            val result = registry.execute(line)
            console.println(result)
        } catch (e: java.lang.Exception) {
            // Ignore
            e.printStackTrace()
        }
    }

    registry.close()
}
